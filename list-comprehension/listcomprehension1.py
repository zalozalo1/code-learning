# list comprehension


#პირველი ლექცია

#------------------
"""
def non_generator_function():
    n = 6
    result_list = []
    for i in range(1, n + 1):
        result_list.append(i ** 2)

        # მოცემული გამოსახულება არის  for in  ლუპი იმისთვის რომ რიცხვების კვადრატები გამოგვეტანა.
"""
#-------------

"""
n=6;
result_list = [i**2 for i in range(1, n+1)]

    # ეს კი არის გენერატორი, რომელიც შემდეგნაირად იკითხება, თავიდან იწერება ფორმირების წესი, შემდეგ ციკლი და ბოლოს ის თუ რაშიც ხდება ციკლი. გენერატორი არის იმისთვის, რომ რაღაც უფრო მსუბუქად გააკეთოს.

"""


#---------------

"""
# გენერატორის გააზრების არაჩვეულებრივი მაგალითი იქნებოდა, რიცხვების ჩამოთვლა შემდეგნაირად

n = 5;
result_list = [1 for _ in range(n)]


    #მოცემული გენერატორი ჩმოწერს ერთიანს ხუთჯერ, არ არის ცვლადის გატნევა საჭირო.
"""


#-----------------

"""
    #შეგვიძლია გავატანოთ პირობა if ის საშუალებით

list_numbers = [12,14,15,18];

result_list = [i for i in list_numbers if i%3 == 0]

    #გამოიტანს list number ის იმ რიცხვებს რომლებიც იყოფიან სამზე, ეს გვიჩვენებს მაგალითს გენერატორზე პირობის გატნევისა.

result_list = [i**2 for i in list_numbers if i%3 == 0]

    #მოცემული მაგალითი კი მხოლოდ იმ რიცხვებს აიყვანს კვადრატში, რომლების სამზე უნაშთოდ იყოფიან.

"""


#------------

"""
    # ასევე სტრინგებზე, მაგალითად:

names = ["ia", "mzia", "manana", "maia"];
result = [n for n names if len(n)>4]

    # გამოგვიტანდა იმ სახელებს მოცემული ჩამონათვალიდან რომლების სიგრძეც მეტია 4 ასოზე.

names = ["ia", "mzia", "manana", "maia"];
result = [ord(n[0])  for n names if len(n)>4]

    # ეს კი იმ სიტყვების პირველი ასოების ჩარ კოდს გამოგვიტანს რომლების ასოების რაოდენობაც აღემატება 4ს
"""

#-----------

"""
numb = [12,13,14,15,16,17];
result = ["even" if x%2 == 0 else 'odd' for x in numb];

    # მოცემული ფუნქცია დააბრუნებს "even"-ს თუ 2 ზე უნაშთოდ იყოდა და დანარჩენ შემთხვევაში "odd"ს ეს თავიდანაა დატანილი ბოლოს კი ციკლი დაიწერება

result = [f'{x}"is even' if x%2 == 0 else f'{x} is odd' for x in numb];

    #ასე შეგვიძლია ფორმატორიც გამოვიყენოთ გენერატორში

"""

#------------

"""
    # ასევე გამოვიყენოთ ლუპი ლუპში ამ შემთხვევაში გენერატორი გენერატორში

list1 = [1,2,3];
list2 = [4,5,6];

result = [(i,j) 
          for i in list1 
          for j in list2
          ]


    #შეგვიძლია ამასაც დავუტანოთ პირობა

result = [(i,j) 
          for i in list1 if i%2 == 0
          for j in list2 if j%2 == 0
          ]

    #ასე გამრავლების ტაბულის დაწერაც კი შეიძლება

result = [(f'{i}*{j} = {i*j}') 
          for i in range(1,11)
          for j in range(1,11)
          ]

"""

#-------

"""
# ორგანზომილებიანი list ები

matrix = [[1,2], [3,4,5], [6,7,8]];

result = [elem
          for comb_elem in matrix
          for elem in comb_elem]

#ორგანზომილებიანის ერთგანზობმილებაში გადატანა

"""